package ruyees.otp.action.base;import java.util.List;import javax.servlet.http.HttpServletRequest;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Scope;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import ruyees.otp.common.hibernate4.Finder;import ruyees.otp.common.hibernate4.Updater;import ruyees.otp.common.hibernate4.Updater.UpdateMode;import ruyees.otp.model.flow.BamProject;import ruyees.otp.model.sys.SysOrgElement;import ruyees.otp.service.AccountService;import ruyees.otp.service.ShiroDbRealm.ShiroUser;import ruyees.otp.service.SysOrgElementService;import ruyees.otp.service.UserRoleService;import ruyees.otp.service.flow.BamProjectService;import ruyees.otp.service.template.ProTemplateService;import ruyees.otp.utils.ShiroUtils;@Controller@RequestMapping(value = "/campus/flow")@Scope(value = "request")public class FlowController {	@Autowired	private BamProjectService bamProjectService;	@Autowired	private ProTemplateService proTemplateService;	@Autowired	private UserRoleService userRoleService;	@Autowired	private AccountService accountService;	@Autowired	private SysOrgElementService sysOrgElementService;	@SuppressWarnings("rawtypes")	@RequestMapping(value = "list", method = RequestMethod.GET)	public String list(Model model) {		model.addAttribute("active", "flow");		ShiroUser user = ShiroUtils.getUser();		String uId = user.id;		Boolean isAdmin = ShiroUtils.isAdmin();		Finder finder = Finder.create("from BamProject b where 1=1");		if (!isAdmin) {			finder.append("and b.user.fdId=:uId");			finder.setParam("uId", uId);		}		finder.append("order by b.template.fdName ASC");		List bamProjects = bamProjectService.find(finder);		model.addAttribute("bamProjects", bamProjects);		return "/base/flow/list";	}	@RequestMapping(value = "add/{id}")	public String add(Model model, @PathVariable("id") String id) {		BamProject bamProject = bamProjectService.load(id);		model.addAttribute("bean", bamProject);		return "/base/flow/add";	}	@RequestMapping(value = "edit/{id}")	public String edit(Model model, @PathVariable("id") String id) {		BamProject bamProject = bamProjectService.findBamProject(id);		SysOrgElement sys = sysOrgElementService.get(bamProject.getSchId());		model.addAttribute("deptName", sys.getFdName());		model.addAttribute("bean", bamProject);		return "/base/flow/edit";	}	@RequestMapping(value = "stop/{id}", method = RequestMethod.POST)	public String delete(BamProject bamProject, Model model,			@PathVariable("id") String id) {		Updater<BamProject> updater = new Updater<BamProject>(bamProject);		bamProject.setStatus(BamProject.IS_INVALID);		updater.setUpdateMode(UpdateMode.MIN);		updater.include("status");		bamProjectService.updateByUpdater(updater);		return "redirect:/campus/flow/list";	}	@RequestMapping(value = "save", method = RequestMethod.POST)	public String save(BamProject bamProject,			RedirectAttributes redirectAttributes, HttpServletRequest request) {		ShiroUser user = ShiroUtils.getUser();		String uId = user.id;		// 维护参与人关联		bamProjectService.save(bamProject, uId);		return "redirect:/campus/flow/list";	}	@RequestMapping(value = "remove/{id}/{mid}", method = RequestMethod.GET)	public String remove(@PathVariable("id") String id,			@PathVariable("mid") String mid) {		bamProjectService.removeMember(id, mid);		return "redirect:/campus/flow/edit/" + id;	}	@RequestMapping(value = "deleteFlow/{id}", method = RequestMethod.GET)	public String deleteFlow(Model model, @PathVariable("id") String id) {		bamProjectService.deleteProject(id);		return "redirect:/campus/flow/list";	}	/**	 * 添加人员	 * 	 * @param bamProject	 * @return	 */	@RequestMapping(value = "addMember", method = RequestMethod.POST)	public String addMember(BamProject bamProject) {		ShiroUser user = ShiroUtils.getUser();		String uid = user.id;		bamProjectService.addMember(bamProject, uid);		return "redirect:/campus/flow/list";	}}