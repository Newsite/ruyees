package ruyees.otp.action.base;import java.io.File;import java.io.IOException;import java.io.UnsupportedEncodingException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.lang3.StringUtils;import org.apache.commons.lang3.math.NumberUtils;import org.apache.commons.lang3.time.DateUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import ruyees.otp.action.coach.BamPackageController;import ruyees.otp.action.view.model.VReportFactor;import ruyees.otp.common.hibernate4.Finder;import ruyees.otp.common.hibernate4.Value;import ruyees.otp.common.page.Pagination;import ruyees.otp.common.utils.TimeUtils;import ruyees.otp.common.utils.Zipper;import ruyees.otp.common.utils.Zipper.FileEntry;import ruyees.otp.common.utils.excel.AbsExportExcel;import ruyees.otp.model.flow.BamCoursewareItem;import ruyees.otp.model.flow.BamIndex;import ruyees.otp.model.flow.BamPackage;import ruyees.otp.model.flow.BamProject;import ruyees.otp.model.flow.BamProjectMember;import ruyees.otp.model.flow.BamProjectPhase;import ruyees.otp.model.flow.Grade;import ruyees.otp.model.flow.GradeItem;import ruyees.otp.model.flow.Tickling;import ruyees.otp.model.sys.SysOrgPerson;import ruyees.otp.service.AccountService;import ruyees.otp.service.ShiroDbRealm.ShiroUser;import ruyees.otp.service.UserRoleService;import ruyees.otp.service.base.ReportFormsService;import ruyees.otp.service.flow.BamProjectService;import ruyees.otp.utils.ShiroUtils;/** * 针对集团主管 *  * @author Zaric * @date 2013-6-1 上午12:36:24 */@Controller@RequestMapping(value = "/group/report")public class ReportFormsController {	private static final Logger log = LoggerFactory			.getLogger(BamPackageController.class);	@Autowired	private ReportFormsService reportFormsService;	@Autowired	private BamProjectService bamProjectService;	@Autowired	private UserRoleService userRoleService;	@Autowired	private AccountService accountService;	/**	 * 进入查询页面	 * 	 * @param model	 * @param pageNo	 * @param param	 * @param request	 * @return	 */	@SuppressWarnings("rawtypes")	@RequestMapping(value = "statList", method = RequestMethod.GET)	public String statList(Model model, String pageNo,			HttpServletRequest request, HttpServletResponse response)			throws Exception {		// startDate		if (StringUtils.isBlank(request.getParameter("startDate"))) {			model.addAttribute("startDate", DateUtils.addDays(new Date(), -20));		}		model.addAttribute("active", "lesson");		Pagination page = reportFormsService.getConditionPage(model, pageNo,				request);		model.addAttribute("page", page);		// excel export		String expExcel = request.getParameter("expExcel");		if (StringUtils.isNotEmpty(expExcel) && "1".equals(expExcel)) {			SimpleDateFormat dateSdf = new SimpleDateFormat("yyyy-MM-dd");			List list = page.getList();			for (Object obj : list) {				BamProjectMember bpm = (BamProjectMember) obj;				bpm.setNewTeachName(bpm.getNewTeach().getRealName());				bpm.setGuidTeachName(bpm.getGuid().getRealName());				bpm.setBeginTem(dateSdf						.format(bpm.getProject().getCreateTime()));				bpm.setProjectName(bpm.getProject().getName());				bpm.setTemplateName(bpm.getProject().getTemplate().getFdName());			}			AbsExportExcel.exportExcel(list, "report.xls", response);			return null;		}		return "/base/report/list";	}	@RequestMapping(value = "excelList", method = RequestMethod.GET)	public String excelList(Model model, String pageNo,			HttpServletRequest request, HttpServletResponse response)			throws Exception {		// startDate		if (StringUtils.isBlank(request.getParameter("startDate"))) {			model.addAttribute("startDate", DateUtils.addDays(new Date(), -20));		}		model.addAttribute("active", "lesson");		List<BamProjectMember> list = reportFormsService				.getConditionList(request);		// excel export		SimpleDateFormat dateSdf = new SimpleDateFormat("yyyy-MM-dd");		for (Object obj : list) {			BamProjectMember bpm = (BamProjectMember) obj;			bpm.setNewTeachName(bpm.getNewTeach().getRealName());			bpm.setGuidTeachName(bpm.getGuid().getRealName());			bpm.setBeginTem(dateSdf.format(bpm.getProject().getCreateTime()));			bpm.setProjectName(bpm.getProject().getName());			bpm.setTemplateName(bpm.getProject().getTemplate().getFdName());		}		AbsExportExcel.exportExcel(list, "report.xls", response);		return null;	}	/**	 * 查询每个人的各阶段情况	 * 	 * @param report	 * @param pageNo	 * @param request	 * @return	 */	@RequestMapping(value = "stageList/{projectId}/{newTeachId}", method = RequestMethod.GET)	public String stageList(Model model,			@PathVariable("projectId") String projectId,			@PathVariable("newTeachId") String newTeachId, String pageNo,			HttpServletRequest request) {		Finder finder = Finder				.create("from BamStage b where b.project.fdId=:projectId and b.newteachId=:newTeachId");		finder.setParam("projectId", projectId);		finder.setParam("newTeachId", newTeachId);		Pagination page = reportFormsService.getPage(finder,				NumberUtils.createInteger(pageNo));		model.addAttribute("page", page);		return "/base/report/stage_list";	}	/**	 * 查询每个人的各阶段的各种内容	 * 	 * @param report	 * @param pageNo	 * @param request	 * @return	 */	@RequestMapping(value = "contentList/{projectId}/{stageId}/{newTeachId}/{stageNo}", method = RequestMethod.GET)	public String contentList(Model model,			@PathVariable("projectId") String projectId,			@PathVariable("stageId") String stageId,			@PathVariable("newTeachId") String newTeachId,			@PathVariable("stageNo") String stageNo, String pageNo,			HttpServletRequest request) {		Finder finder = Finder				.create("from BamProjectPhase b where b.stage.fdId=:stageId and b.newteachId=:newteachId");		finder.setParam("stageId", stageId);		finder.setParam("newteachId", newTeachId);		Pagination page = reportFormsService.getPage(finder,				NumberUtils.createInteger(pageNo));		model.addAttribute("page", page);		if ("5".equals(stageNo)) {			BamProjectPhase phase = (BamProjectPhase) page.getList().get(0);			List<Grade> grades = phase.getGrades();			if (grades != null && grades.size() > 0) {				Grade grade = grades.get(0);				for (GradeItem item : grade.getGradeItems()) {					item.setNewTeach(accountService.findById(item.getUid()));					item.setAdvier(accountService.findById(item.getAdvierId()));				}				for (Tickling tick : grade.getTicklings()) {					tick.setAdvier(accountService.findById(grade.getGuidId()));				}			}		}		model.addAttribute("stageNo", stageNo);		model.addAttribute("projectId", projectId);		model.addAttribute("newTeachId", newTeachId);		return "/base/report/content_list";	}	/**	 * 集团打包下载作业	 * 	 * @param report	 * @param pageNo	 * @param request	 * @return	 */	@SuppressWarnings("unchecked")	@RequestMapping(value = "dataExp/{stageId}/{newTeachId}/{stageNo}", method = RequestMethod.GET)	public String dataExp(Model model, @PathVariable("stageId") String stageId,			@PathVariable("newTeachId") String newTeachId,			@PathVariable("stageNo") String stageNo,			HttpServletRequest request, HttpServletResponse response)			throws UnsupportedEncodingException {		Finder finder = Finder				.create("from BamProjectPhase b where b.stage.fdId=:stageId and b.newteachId=:newteachId and b.through=:through and b.fdIndex=:fdIndex");		finder.setParam("stageId", stageId);		finder.setParam("newteachId", newTeachId);		finder.setParam("through", true);		finder.setParam("fdIndex", 1);		SysOrgPerson person = accountService.findById(newTeachId);		BamProjectPhase phase = reportFormsService.findUnique(finder);		List<FileEntry> fileEntrys = new ArrayList<FileEntry>();		// String temp = "";		String zipName = null;		// 作业		if ("2".equals(stageNo)) {			String bamPackageId = phase.getBamPackage().getFdId();			Finder finder2 = Finder.create("select b from BamIndex b ");			finder2.append("left join fetch b.bamOperation o ");			finder2.append("left join fetch o.bamPackage pack ");			finder2.append("where pack.fdId=:fdId ");			finder2.setParam("fdId", bamPackageId);			List<BamIndex> bamIndexList = reportFormsService.find(finder2);			BamPackage bamPackage = reportFormsService.get(BamPackage.class,					bamPackageId);			for (BamIndex index : bamIndexList) {				File file = new File(index.getBamAttMain().getFilePath());				fileEntrys.add(new FileEntry(index.getFdIndexName(), "", file));			}			String flowname = bamPackage.getPhase().getStage().getProject()					.getName();			zipName = person.getDeptName() + "-" + person.getRealName() + "-"					+ flowname + "-学术作业包-"					+ TimeUtils.covertDateStr(new Date(), "yyyy-MM-dd")					+ ".zip";		} else {			// 确认课件			String coursewareId = phase.getCoursewares().get(0).getFdId();			Finder finder2 = Finder					.create("select b from BamCoursewareItem b ");			finder2.append("left join fetch b.bamCourseware c ");			finder2.append("where c.fdId=:fdId ");			finder2.setParam("fdId", coursewareId);			List<BamCoursewareItem> bamCoursewareItemList = reportFormsService					.find(finder2);			for (BamCoursewareItem bamItem : bamCoursewareItemList) {				File file = new File(bamItem.getPath());				fileEntrys.add(new FileEntry(bamItem.getName(), "", file));			}			// temp = "确认课件";			// 广州学校-沈凌-雅思强化口语-课件-20130513.zip			String flowname = phase.getStage().getProject().getName();			zipName = person.getDeptName() + "-" + person.getRealName() + "-"					+ flowname + "-课件-"					+ TimeUtils.covertDateStr(new Date(), "yyyy-MM-dd")					+ ".zip";		}		String agent = request.getHeader("USER-AGENT");		// 设置文件头，文件名称或编码格式		if (null != agent && -1 != agent.indexOf("MSIE")) {// IE			zipName = java.net.URLEncoder.encode(zipName, "UTF-8");		} else {			zipName = new String(zipName.getBytes("UTF-8"), "ISO8859-1");		}		response.setContentType("application/x-download;charset=UTF-8");		response.addHeader("Content-disposition", "filename=" + zipName				+ ".zip");		try {			// 模板一般都在windows下编辑，所以默认编码为GBK			Zipper.zip(response.getOutputStream(), fileEntrys, "GBK");		} catch (IOException e) {			log.error("export db error!", e);		}		return null;	}	/**	 * 指导教师授课	 * 	 * @param report	 * @param pageNo	 * @param request	 * @return	 */	@SuppressWarnings("rawtypes")	@RequestMapping(value = "guidList", method = RequestMethod.GET)	public String guidList(Model model, String pageNo,			HttpServletRequest request, HttpServletResponse response) {		model.addAttribute("active", "groupguidList");		String orgNames = request.getParameter("orgNames");		String guidNames = request.getParameter("guidNames");		String schIds = request.getParameter("schIds");		String guidIds = request.getParameter("guidIds");		String startDate = request.getParameter("startDate");		String endDate = request.getParameter("endDate");		if (StringUtils.isBlank(startDate)) {			startDate = TimeUtils.covertDateStr(					DateUtils.addDays(new Date(), -20), "yyyy-MM-dd");		}		if (StringUtils.isBlank(endDate)) {			endDate = TimeUtils.covertDateStr(DateUtils.addDays(new Date(), 1),					"yyyy-MM-dd");		}		VReportFactor report = new VReportFactor();		report.setSchIds(schIds);		report.setGuidIds(guidIds);		report.setStartDate(startDate);		report.setEndDate(endDate);		List<Map> list = reportFormsService.findTeaching(report);		model.addAttribute("list", list);		String expExcel = request.getParameter("expExcel");		if (StringUtils.isNotEmpty(expExcel) && "1".equals(expExcel)) {			AbsExportExcel.exportExcel(list, "guid.xls", response);			return null;		}		model.addAttribute("schIds", schIds);		model.addAttribute("orgNames", orgNames);		model.addAttribute("guidIds", guidIds);		model.addAttribute("guidNames", guidNames);		model.addAttribute("startDate", startDate);		model.addAttribute("endDate", endDate);		return "/base/report/guid_list";	}	/**	 * 设置教研及学校负责人角色	 * 	 * @param report	 * @param pageNo	 * @param request	 * @return	 */	public void setGroupAndCampusRole(Model model) {		// 集团负责人显示学校，学校负责人取学校ID		ShiroUser user = ShiroUtils.getUser();		String uId = user.id;		List<BamProject> lists = bamProjectService.findByCriteria(				BamProject.class, Value.eq("status", BamProject.IS_OPEN),				Value.eq("user.fdId", uId));		if (lists != null && lists.size() > 0) {			BamProject bamProject = lists.get(0);			model.addAttribute("bamProject", bamProject);		}	}	/**	 * 查询每个导师的所有徒弟给他的评价	 * 	 * @param report	 * @param pageNo	 * @param request	 * @return	 */	@RequestMapping(value = "detailList/{guidId}", method = RequestMethod.GET)	public String detailList(Model model,			@PathVariable("guidId") String guidId, String pageNo,			HttpServletRequest request) {		Finder finder = Finder				.create("from Tickling t where t.totalvalue is not null and t.guidId=:guidId");		finder.setParam("guidId", guidId);		Pagination page = reportFormsService.getPage(finder,				NumberUtils.createInteger(pageNo));		for (Object obj : page.getList()) {			Tickling t = (Tickling) obj;			t.setNewTeach(accountService.findById(t.getNewTeachId()));		}		SysOrgPerson guid = accountService.findById(guidId);		model.addAttribute("guid", guid);		model.addAttribute("page", page);		return "/base/report/detail_list";	}}