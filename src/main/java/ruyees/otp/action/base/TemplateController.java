package ruyees.otp.action.base;import java.util.List;import javax.servlet.http.HttpServletRequest;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import ruyees.otp.common.hibernate4.Finder;import ruyees.otp.common.hibernate4.Finder.SearchType;import ruyees.otp.common.page.Pagination;import ruyees.otp.model.base.Diction;import ruyees.otp.model.sys.RoleEnum;import ruyees.otp.model.template.ProTemplate;import ruyees.otp.service.AccountService;import ruyees.otp.service.UserDictionService;import ruyees.otp.service.base.DictionService;import ruyees.otp.service.flow.BamProjectService;import ruyees.otp.service.template.ProTemplateService;import ruyees.otp.utils.ShiroUtils;@Controller@RequestMapping(value = "/group/template")public class TemplateController {	@Autowired	private ProTemplateService proTemplateService;	@Autowired	private DictionService dictionService;	@Autowired	private BamProjectService bamProjectService;	@Autowired	private AccountService accountService;	@Autowired	private UserDictionService userDictionService;	@RequestMapping(value = "list", method = RequestMethod.GET)	public String list(Model model, String pageNo, HttpServletRequest request) {		model.addAttribute("active", "template");		Integer pn = 1;		if (StringUtils.isNotBlank(pageNo)) {			pn = Integer.parseInt(pageNo);		}		Finder finder = Finder.create("from ProTemplate p where 1=1");		if (!ShiroUtils.isAdmin() && ShiroUtils.hasRole(RoleEnum.group)) {			finder.search("p.program.fdId", userDictionService					.getDictionIdByUser(ShiroUtils.getUser().id), SearchType.IN);		}		finder.append("order by p.fdName ASC");		Pagination page = proTemplateService.getPage(finder, pn);		model.addAttribute("page", page);		// 关联删除提示		String flag = request.getParameter("flag");		model.addAttribute("flag", flag);		return "/base/template/list";	}	@RequestMapping(value = "add")	public String add(Model model) {		List<Diction> pList = dictionService.findProject();		List<Diction> cList = dictionService.findCourse();		List<Diction> iList = dictionService.findPartial();		List<Diction> sList = dictionService.findStage();		model.addAttribute("pList", pList);		model.addAttribute("cList", cList);		model.addAttribute("iList", iList);		model.addAttribute("sList", sList);		model.addAttribute("method", "add");		return "/base/template/edit";	}	@RequestMapping(value = "save", method = RequestMethod.POST)	public String save(ProTemplate proTemplate,			RedirectAttributes redirectAttributes, HttpServletRequest request) {		proTemplateService.saveTemplateAndStatus(proTemplate);		return "redirect:/group/template/list";	}	@RequestMapping(value = "delete/{id}", method = RequestMethod.POST)	public String deleteById(RedirectAttributes redirectAttributes,			@PathVariable("id") String id) {		Finder finder = Finder				.create("from BamProject b  where b.template.fdId=:fdId");		finder.setParam("fdId", id);		Boolean flag = bamProjectService.hasValue(finder);		if (flag) {			redirectAttributes.addAttribute("flag", "no");			return "redirect:/group/template/list";		} else {			proTemplateService.delete(id);			return "redirect:/group/template/list";		}	}	@RequestMapping(value = "delete")	public String delete(RedirectAttributes redirectAttributes,			HttpServletRequest request) {		String[] ids = request.getParameterValues("ids");		proTemplateService.delete(ids);		return "redirect:/group/template/list";	}	@RequestMapping(value = "edit/{id}")	public String edit(Model model, @PathVariable("id") String id) {		List<Diction> pList = dictionService.findProject();		List<Diction> cList = dictionService.findCourse();		List<Diction> iList = dictionService.findPartial();		List<Diction> sList = dictionService.findStage();		model.addAttribute("pList", pList);		model.addAttribute("cList", cList);		model.addAttribute("iList", iList);		model.addAttribute("sList", sList);		model.addAttribute("bean", proTemplateService.load(id));		model.addAttribute("method", "edit");		return "/base/template/edit";	}	@RequestMapping(value = "view/{id}")	public String view(Model model, @PathVariable("id") String id) {		model.addAttribute("bean", proTemplateService.load(id));		return "/base/template/view";	}	/**	 * 下发模板 选择发起人	 * 	 * @param model	 * @param id	 * @return	 */	@RequestMapping(value = "assignment/{id}")	public String assignment(Model model, @PathVariable("id") String id) {		model.addAttribute("bean", proTemplateService.load(id));		return "/base/template/assignment";	}	/**	 * 保存模板发起人	 * 	 * @param proTemplate	 * @param redirectAttributes	 * @return	 */	@RequestMapping(value = "assignmentSave", method = RequestMethod.POST)	public String assignmentSave(ProTemplate proTemplate,			RedirectAttributes redirectAttributes, HttpServletRequest request) {		// 保存流程模板数据		proTemplateService.saveAssignment(proTemplate);		return "redirect:/group/template/list";	}}