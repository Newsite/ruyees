package ruyees.otp.service.flow;import java.util.ArrayList;import java.util.List;import java.util.Set;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.CollectionUtils;import ruyees.otp.common.hibernate4.Finder;import ruyees.otp.common.hibernate4.Value;import ruyees.otp.common.utils.ComUtils;import ruyees.otp.common.utils.MyBeanUtils;import ruyees.otp.model.base.AttMain;import ruyees.otp.model.base.ContentMovie;import ruyees.otp.model.base.Courseware;import ruyees.otp.model.base.CoursewareItem;import ruyees.otp.model.base.Exam;import ruyees.otp.model.base.ExamCategory;import ruyees.otp.model.base.Index;import ruyees.otp.model.base.OperPackage;import ruyees.otp.model.base.Operation;import ruyees.otp.model.flow.BamAttMain;import ruyees.otp.model.flow.BamCourseware;import ruyees.otp.model.flow.BamCoursewareItem;import ruyees.otp.model.flow.BamExam;import ruyees.otp.model.flow.BamExamCategory;import ruyees.otp.model.flow.BamIndex;import ruyees.otp.model.flow.BamOperation;import ruyees.otp.model.flow.BamPackage;import ruyees.otp.model.flow.BamProject;import ruyees.otp.model.flow.BamProjectMember;import ruyees.otp.model.flow.BamProjectPhase;import ruyees.otp.model.flow.BamSeeCw;import ruyees.otp.model.flow.BamStage;import ruyees.otp.model.flow.Grade;import ruyees.otp.model.flow.GradeItem;import ruyees.otp.model.flow.Tickling;import ruyees.otp.model.sys.RoleEnum;import ruyees.otp.model.sys.SysOrgPerson;import ruyees.otp.model.template.ProTemplate;import ruyees.otp.model.template.TemplateContent;import ruyees.otp.model.template.TemplateItem;import ruyees.otp.service.AccountService;import ruyees.otp.service.UserRoleService;import ruyees.otp.utils.PhaseUtils;/** *  * 流程记录 详细处理流程说明，查看： *  * @see ruyees.otp.model.flow.BamProject * @author Zaric * @date 2013-6-1 上午1:30:45 */@Service@Transactional(readOnly = true)public class BamProjectService extends BamBaseService {	@Autowired	private AccountService accountService;	@Autowired	private UserRoleService userRoleService;	public BamProject findBamProject(String id) {		BamProject project = load(id);		List<BamProjectMember> memebers = project.getBamProjectMembers();		for (BamProjectMember member : memebers) {			SysOrgPerson newTeach = accountService.findById(member					.getNewteachId());			SysOrgPerson guid = accountService.findById(member.getGuidId());			member.setNewTeach(newTeach);			member.setGuid(guid);		}		return project;	}	@Transactional(readOnly = false)	public void removeAss(String id) {		BamProject project = get(BamProject.class, id);		if (project == null)			return;		project.setInvalid(true);		getBaseDao().update(project);	}	@Transactional(readOnly = false)	public void addAss(String id) {		BamProject project = get(BamProject.class, id);		if (project == null)			return;		project.setInvalid(false);		getBaseDao().update(project);	}	@Transactional(readOnly = false)	public void deleteProject(String id) {		BamProject project = get(BamProject.class, id);		if (project == null)			return;		List<BamProjectMember> members = project.getBamProjectMembers();		List<BamStage> stages = findByCriteria(BamStage.class,				Value.eq("project.fdId", id));		if (!CollectionUtils.isEmpty(members)) {			for (int i = 0; i < members.size(); i++) {				BamProjectMember member = members.get(i);				/*				 * List<BamStage> stages2 = findByCriteria(BamStage.class,				 * Value.eq("project.fdId", id), Value.eq("newteachId",				 * member.getNewteachId())); deleteFlow(stages2);				 */				deleteEntity(member);			}		}		deleteFlow(stages);		deleteEntity(project);	}	@Transactional(readOnly = false)	public void removeMember(String id, String newId) {		BamProjectMember member = get(BamProjectMember.class, newId);		// 阶段		List<BamStage> stages = findByCriteria(BamStage.class,				Value.eq("project.fdId", id),				Value.eq("newteachId", member.getNewteachId()));		deleteFlow(stages);		deleteEntity(member);	}	private void deleteFlow(List<BamStage> stages) {		for (BamStage bamStage : stages) {			List<BamProjectPhase> phases = bamStage.getBamProjectPhases();			for (BamProjectPhase phase : phases) {				// 文档视频				List<BamSeeCw> seeCw = phase.getCws();				if (!CollectionUtils.isEmpty(seeCw)) {					for (BamSeeCw bamSeeCw : seeCw) {						deleteEntity(bamSeeCw);					}				}				// 课件				List<BamCourseware> courseWares = phase.getCoursewares();				if (!CollectionUtils.isEmpty(courseWares)) {					for (BamCourseware bamCourseware : courseWares) {						List<BamCoursewareItem> items = bamCourseware								.getItems();						if (!CollectionUtils.isEmpty(items)) {							for (BamCoursewareItem item : items) {								deleteEntity(item);							}						}						deleteEntity(bamCourseware);					}				}				// 试卷				List<BamExamCategory> categorys = phase.getExamCategories();				if (!CollectionUtils.isEmpty(categorys)) {					for (BamExamCategory category : categorys) {						List<BamExam> exams = category.getBamExams();						if (!CollectionUtils.isEmpty(exams)) {							for (BamExam bamExam : exams) {								deleteEntity(bamExam);							}						}						deleteEntity(category);					}				}				// 批课打分				List<Grade> grades = phase.getGrades();				if (!CollectionUtils.isEmpty(grades)) {					for (Grade grade : grades) {						List<GradeItem> items = grade.getGradeItems();						if (!CollectionUtils.isEmpty(items)) {							for (GradeItem gradeItem : items) {								deleteEntity(gradeItem);							}						}						List<Tickling> ticks = grade.getTicklings();						if (!CollectionUtils.isEmpty(ticks)) {							for (Tickling tickling : ticks) {								deleteEntity(tickling);							}						}						deleteEntity(grade);					}				}				// 作业包				BamPackage bamPackage = phase.getBamPackage();				if (bamPackage != null) {					List<BamOperation> bamOperations = bamPackage							.getBamOperation();					if (!CollectionUtils.isEmpty(bamOperations)) {						for (BamOperation bamOperation : bamOperations) {							List<BamIndex> bamIndexs = bamOperation									.getBamIndexs();							if (!CollectionUtils.isEmpty(bamIndexs)) {								for (BamIndex bamIndex : bamIndexs) {									deleteEntity(bamIndex);								}							}							deleteEntity(bamOperation);						}					}					deleteEntity(bamPackage);				}				deleteEntity(phase);			}			deleteEntity(bamStage);		}	}	/**	 * @param bamProject	 * @param uid	 * @info :	 * 	 *       <pre>	 *     1:添加流程记录表 BamProject	 * 	 *     2:添加流程参与人(发起流程时，必须有对应的参与人)	 * 	 *     3:如果为添加（添加相应的流程阶段记录和步骤记录，并把状态值为未完成）	 * 	 *     4:如果为修改（先删除相应的流程阶段记录和步骤记录，然后添加，并把状态值为未完成）	 * </pre>	 */	@Transactional(readOnly = false)	public void save(BamProject bamProject, String uid) {		// 查询发起人		SysOrgPerson person = accountService.get(uid);		// 必须有对应的参与人才可以保存		List<BamProjectMember> members = bamProject.getBamProjectMembers();		for (BamProjectMember member : members) {			// 设置新教师的权限			if (userRoleService.isEmptyPerson(member.getNewteachId(),					RoleEnum.trainee)) {				userRoleService.addUserRole(member.getNewteachId(),						RoleEnum.trainee);			}			// 设置指导教师的权限			if (userRoleService.isEmptyPerson(member.getGuidId(),					RoleEnum.guidance)) {				userRoleService.addUserRole(member.getGuidId(),						RoleEnum.guidance);			}			member.setStartTime(ComUtils.now());			member.setProject(bamProject);		}		// 维护流程模板关联		ProTemplate template = bamProject.getTemplate();		bamProject.setTemplate(template);		bamProject.setCreateTime(ComUtils.now());		bamProject.setStatus(BamProject.IS_OPEN);		bamProject.setUser(person);		bamProject.setDeptId(person.getDepatId());		bamProject = save(bamProject);		bamProject = load(bamProject.getFdId());		// 删除阶段和对应的步骤		List<BamStage> bamStages = bamProject.getBamStages();		if (bamStages != null) {			for (BamStage bamStage : bamStages) {				bamStage.setBamProjectPhases(new ArrayList<BamProjectPhase>());				deleteEntity(bamStage);			}		}		addStageAndPhase(bamProject, template, members);	}	/**	 * 添加人员	 * 	 * @param bamProject	 * @param uid	 */	@Transactional(readOnly = false)	public void addMember(BamProject bamProject, String uid) {		List<BamProjectMember> targetMember = new ArrayList<BamProjectMember>();		List<BamProjectMember> members = bamProject.getBamProjectMembers();		BamProjectMember m = null;		for (BamProjectMember bamProjectMember : members) {			if (StringUtils.isBlank(bamProjectMember.getNewteachId())					|| StringUtils.isBlank(bamProjectMember.getGuidId())) {				continue;			}			m = new BamProjectMember();			MyBeanUtils.copyProperties(bamProjectMember, m);			targetMember.add(m);		}		ProTemplate template = bamProject.getTemplate();		for (BamProjectMember member : targetMember) {			// 设置新教师的权限			if (userRoleService.isEmptyPerson(member.getNewteachId(),					RoleEnum.trainee)) {				userRoleService.addUserRole(member.getNewteachId(),						RoleEnum.trainee);			}			// 设置指导教师的权限			if (userRoleService.isEmptyPerson(member.getGuidId(),					RoleEnum.guidance)) {				userRoleService.addUserRole(member.getGuidId(),						RoleEnum.guidance);			}			member.setProject(bamProject);			member.setStartTime(ComUtils.now());			saveOnly(member);		}		bamProject = load(BamProject.class, bamProject.getFdId());		addStageAndPhase(bamProject, template, targetMember);	}	/**	 * 查询模板对应的流程阶段	 * 	 * @param template	 * @return	 */	@SuppressWarnings(value = "unchecked")	private List<TemplateItem> findTemplateItemByTemplate(ProTemplate template) {		Finder finder = Finder				.create("from TemplateContent content left join fetch content.item item  ");		finder.append("join fetch item.template t");		finder.append("where t.fdId=:fdId")				.setParam("fdId", template.getFdId());		finder.setCacheable(true);		List<TemplateContent> contents = find(finder);		return contents.get(0).getItem().getTemplate().getTemplateItem();	}	/**	 * 添加流程阶段记录和流程步骤记录	 * 	 * @param bamProject	 * @param template	 * @param members	 */	private void addStageAndPhase(BamProject bamProject, ProTemplate template,			List<BamProjectMember> members) {		List<TemplateItem> items = findTemplateItemByTemplate(template);		for (TemplateItem item : items) {			for (BamProjectMember member : members) {				// 添加人员对应的阶段				BamStage stage = new BamStage();				stage.setProject(bamProject);				stage.setNewteachId(member.getNewteachId());				stage.setGuidId(member.getGuidId());				stage.setFdIndex(item.getFdIndex());				stage.setTemplateItem(item);				stage.setThrough(false);				stage.setAssessment(item.getAssessment());// 是否需要审核				stage.setDefaultComment(item.getDefaultComment());// 默认审核通过评语				stage = getBaseDao().save(stage);				// 添加流程步骤				BamProjectPhase phase = null;				for (TemplateContent content : item.getTemplateContents()) {					phase = new BamProjectPhase();					phase.setStage(stage);					phase.setContent(content);					phase.setNewteachId(member.getNewteachId());					phase.setFdIndex(content.getFdIndex());					phase.setGuidId(member.getGuidId());					phase.setThrough(false);					phase.setFiled(PhaseUtils.fetchField(item.getFdIndex(),							content.getFdIndex()));					phase = getBaseDao().save(phase);					// 添加视频					Set<ContentMovie> contentMovies = content							.getContentMovies();					if (!CollectionUtils.isEmpty(contentMovies)) {						BamSeeCw bamSeeCw = null;						for (ContentMovie contentMovie : contentMovies) {							bamSeeCw = new BamSeeCw();							MyBeanUtils.copyProperties(contentMovie, bamSeeCw);							bamSeeCw.setPhase(phase);							bamSeeCw.setThrough(false);							bamSeeCw.setFdId(null);							getBaseDao().save(bamSeeCw);							// copy attmain							List<AttMain> attMains = contentMovie.getAttMains();							if (attMains != null) {								BamAttMain bamAtt = null;								for (AttMain attMain : attMains) {									bamAtt = new BamAttMain();									bamAtt.setBamSeeCw(bamSeeCw);									MyBeanUtils.copyProperties(attMain, bamAtt);									bamAtt.setFdId(null);									getBaseDao().save(bamAtt);								}							}						}					}					// 添加考试					Set<ExamCategory> examCategories = content							.getExamCategories();					if (examCategories != null) {						BamExamCategory bamExamCategory = null;						for (ExamCategory examCategory : examCategories) {							bamExamCategory = new BamExamCategory();							MyBeanUtils.copyProperties(examCategory,									bamExamCategory);							bamExamCategory.setFdId(null);							bamExamCategory.setPhase(phase);							bamExamCategory.setThrough(false);							getBaseDao().save(bamExamCategory);							List<Exam> exams = examCategory.getExams();							if (exams != null) {								BamExam bamExam = null;								for (Exam exam : exams) {									bamExam = new BamExam();									bamExam.setBamExamCategory(bamExamCategory);									MyBeanUtils.copyProperties(exam, bamExam);									bamExam.setFdId(null);									getBaseDao().save(bamExam);								}							}						}					}					// 新教师提交课件的资料及说明					Courseware courseware = content.getCourseware();					if (courseware != null) {						BamCourseware bamCourseware = new BamCourseware();						MyBeanUtils.copyProperties(courseware, bamCourseware);						bamCourseware.setFdId(null);						bamCourseware								.setItems(new ArrayList<BamCoursewareItem>());						bamCourseware.setPhase(phase);						bamCourseware.setThrough(false);						getBaseDao().save(bamCourseware);						List<CoursewareItem> coursewareItems = courseware								.getItems();						if (coursewareItems != null) {							BamCoursewareItem bamCoursewareItem = null;							for (CoursewareItem coursewareItem : coursewareItems) {								bamCoursewareItem = new BamCoursewareItem();								MyBeanUtils.copyProperties(coursewareItem,										bamCoursewareItem);								bamCoursewareItem.setFdId(null);								bamCoursewareItem.setThrough(false);								bamCoursewareItem										.setBamCourseware(bamCourseware);								// bamCourseware.getItems().add(bamCoursewareItem);								getBaseDao().save(bamCoursewareItem);							}						}					}					// 作业包					OperPackage packages = content.getOperPackage();					if (packages != null) {						BamPackage bamPackage = new BamPackage();						MyBeanUtils.copyProperties(packages, bamPackage);						bamPackage.setFdId(null);						bamPackage.setPhase(phase);						// phase.setBamPackage(bamPackage);						bamPackage.setThrough(false);						getBaseDao().save(bamPackage);						List<Operation> operations = packages.getOperations();						if (operations != null) {							BamOperation bamOperation = null;							for (Operation operation : operations) {								bamOperation = new BamOperation();								MyBeanUtils.copyProperties(operation,										bamOperation);								bamOperation.setFdId(null);								bamOperation.setBamPackage(bamPackage); // add																		// foreign																		// key								getBaseDao().save(bamOperation);								List<Index> indexs = operation.getIndexs();								if (indexs != null) {									BamIndex bamIndex = null;									for (Index index : indexs) {										bamIndex = new BamIndex();										MyBeanUtils.copyProperties(index,												bamIndex);										bamIndex.setFdId(null);										bamIndex.setStatus(0);										bamIndex.setBamOperation(bamOperation);// add																				// foreign																				// key										getBaseDao().save(bamIndex);									}								}							}						}					}				}			}		}	}	@SuppressWarnings("unchecked")	@Override	public Class<BamProject> getEntityClass() {		return BamProject.class;	}	/**	 * 获取一个流程阶段步骤，只返回一个，用于修改资源描述	 * 	 * @param flowId	 * @param stage	 * @param step	 * @return	 */	@SuppressWarnings("unchecked")	public BamProjectPhase findBamProjectPhase(String flowId, int stage,			int step) {		Finder finder = Finder				.create("from BamProjectPhase phase left join fetch phase.stage stage left join fetch stage.project project left join fetch phase.content content left join fetch content.item item");		finder.append("where project.status=:status").setParam("status",				BamProject.IS_OPEN);// 流程开启		finder.append("and project.fdId=:fdId").setParam("fdId", flowId);// 对应流程		finder.append("and stage.fdIndex=:stageIndex").setParam("stageIndex",				stage);// 阶段		finder.append("and phase.fdIndex=:phaseIndex").setParam("phaseIndex",				step);// 步骤		List<BamProjectPhase> contents = find(finder);		if (contents == null || contents.size() < 1)			return null;		return contents.get(0);	}	/**	 * 判断登录者是否为流程发起人	 * 	 * @param flowId	 * @param userId	 * @return	 */	public Boolean isSponsor(String flowId, String userId) {		List<BamProject> lists = findByCriteria(BamProject.class,				Value.eq("fdId", flowId), Value.eq("user.fdId", userId),				Value.eq("status", BamProject.IS_OPEN));		return !CollectionUtils.isEmpty(lists);	}	/**	 * 判断新教师	 * 	 * @param flowId	 * @param userId	 * @return	 */	public Boolean checkFlowAndUser(String flowId, String schId, String userId) {		Finder finder = Finder				.create("from BamProject b left join b.bamProjectMembers m");		finder.append("where b.fdId=:fdId").setParam("fdId", flowId);		finder.append("and b.schId=:schId").setParam("schId", schId);		finder.append("and m.newteachId=:uid").setParam("uid", userId);		finder.append("and b.status=:status").setParam("status",				BamProject.IS_OPEN);		return !CollectionUtils.isEmpty(find(finder));	}}