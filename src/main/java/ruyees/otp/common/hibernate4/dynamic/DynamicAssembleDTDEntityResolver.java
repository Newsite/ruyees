package ruyees.otp.common.hibernate4.dynamic;import java.io.InputStream;import java.io.Serializable;import org.hibernate.internal.util.ConfigHelper;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.xml.sax.EntityResolver;import org.xml.sax.InputSource;/** * hibernate动态sql dtd解析器 * @author Zaric * @date  2013-6-1 上午12:46:26 */public class DynamicAssembleDTDEntityResolver implements EntityResolver, Serializable {        /**	 * 	 */	private static final long serialVersionUID = 1L;		private static final Logger LOGGER = LoggerFactory.getLogger(DynamicAssembleDTDEntityResolver.class);	    private static final String HOP_DYNAMIC_STATEMENT = "http://www.dynamic.com/dtd/";    //dtd 文件路径    private static final String PACK_PATH = "ruyees/otp/common/hibernate4/dynamic/";    public static void main(String[] args){    }    public InputSource resolveEntity(String publicId, String systemId) {        InputSource source = null;        if (systemId != null) {            LOGGER.debug("trying to resolve system-id [" + systemId + "]");            if (systemId.startsWith(HOP_DYNAMIC_STATEMENT)) {                LOGGER.debug("recognized hop dyanmic statement namespace; attempting to resolve on classpath under ....");                source = resolveOnClassPath(publicId, systemId,                        HOP_DYNAMIC_STATEMENT);            }        }        return source;    }    private InputSource resolveOnClassPath(String publicId, String systemId,                                           String namespace) {        InputSource source = null;        String path = PACK_PATH + systemId.substring(namespace.length());        InputStream dtdStream = resolveInHibernateNamespace(path);        if (dtdStream == null) {            LOGGER.debug("unable to locate [" + systemId + "] on classpath");            if (systemId.substring(namespace.length()).indexOf("2.0") > -1) {                LOGGER.error("Don't use old DTDs, read the Hibernate 4.x Migration Guide!");            }        } else {            LOGGER.debug("located [" + systemId + "] in classpath");            source = new InputSource(dtdStream);            source.setPublicId(publicId);            source.setSystemId(systemId);        }        return source;    }    protected InputStream resolveInHibernateNamespace(String path) {        return this.getClass().getClassLoader().getResourceAsStream(path);    }    protected InputStream resolveInLocalNamespace(String path) {        try {            return ConfigHelper.getUserResourceAsStream(path);        } catch (Throwable t) {            return null;        }    }}