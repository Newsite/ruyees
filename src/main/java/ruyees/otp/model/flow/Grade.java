package ruyees.otp.model.flow;import java.text.DecimalFormat;import java.util.List;import javax.persistence.CascadeType;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.FetchType;import javax.persistence.JoinColumn;import javax.persistence.ManyToOne;import javax.persistence.OneToMany;import javax.persistence.OrderBy;import javax.persistence.Table;import javax.persistence.Transient;import org.hibernate.annotations.Cache;import org.hibernate.annotations.CacheConcurrencyStrategy;import ruyees.otp.model.BamProcess;import ruyees.otp.model.IdEntity;import ruyees.otp.model.sys.SysOrgPerson;/** * 批课计划及打分表 *  * @author Zaric * @date 2013-6-1 上午1:18:31 */@Entity@Table(name = "IXDF_OTP_BAM_GRADE")@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)public class Grade extends IdEntity implements BamProcess {	/**	 * 	 */	private static final long serialVersionUID = 1L;	/**	 * 新教师ID	 */	private String uid;	/**	 * 主题	 */	private String title;	/**	 * 指导教师ID	 */	private String guidId;	/**	 * 指导教师给新教师的 打分平均分	 */	private Float value;	private boolean through;	/**	 * 对应流程步骤记录	 */	private BamProjectPhase phase;	/**	 * 批课打分分项	 */	private List<GradeItem> gradeItems;	/**	 * 新教师给指导教师打分	 */	private List<Tickling> ticklings;	/**	 * 导师评语	 */	private String remark;	/**	 * 批课打分分项	 * 	 * @return	 */	@OneToMany(cascade = { CascadeType.PERSIST, CascadeType.REFRESH,			CascadeType.REMOVE, CascadeType.MERGE }, fetch = FetchType.EAGER, mappedBy = "grade")	@OrderBy("startTime asc")	public List<GradeItem> getGradeItems() {		return gradeItems;	}	/**	 * 批课打分分项	 * 	 * @param gradeItems	 */	public void setGradeItems(List<GradeItem> gradeItems) {		this.gradeItems = gradeItems;	}	/**	 * 对应新教师的id	 * 	 * @return	 */	@Column(length = 32, name = "fdUid")	public String getUid() {		return uid;	}	/**	 * 对应新教师的id	 * 	 * @param uid	 */	public void setUid(String uid) {		this.uid = uid;	}	/**	 * 主题	 * 	 * @return	 */	@Column(length = 100)	public String getTitle() {		return title;	}	/**	 * 主题	 * 	 * @param title	 */	public void setTitle(String title) {		this.title = title;	}	/**	 * 对应指导教师的id	 * 	 * @return	 */	@Column(length = 32)	public String getGuidId() {		return guidId;	}	/**	 * 对应指导教师的id	 * 	 * @param guidId	 */	public void setGuidId(String guidId) {		this.guidId = guidId;	}	/**	 * 指导教师给新教师的打分 平均分	 * 	 * @return	 */	@Column(name = "fdValue", precision = 10, scale = 1)	public Float getValue() {		return value;	}	/**	 * 指导教师给新教师的打分 平均分	 * 	 * @param value	 */	public void setValue(Float value) {		this.value = value;	}	/**	 * 流程步骤记录	 * 	 * @return	 */	@ManyToOne(fetch = FetchType.LAZY)	@JoinColumn(name = "phaseId")	public BamProjectPhase getPhase() {		return phase;	}	/**	 * 流程步骤记录	 * 	 * @param phase	 */	public void setPhase(BamProjectPhase phase) {		this.phase = phase;	}	/**	 * 批课老师的分	 * 	 * @return	 */	@OneToMany(mappedBy = "grade", fetch = FetchType.LAZY, cascade = {			CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH })	public List<Tickling> getTicklings() {		return ticklings;	}	public void setTicklings(List<Tickling> ticklings) {		this.ticklings = ticklings;	}	/**	 * 是否通过	 * 	 * @return	 */	public boolean getThrough() {		return through;	}	/**	 * 是否通过	 * 	 * @param through	 */	public void setThrough(boolean through) {		this.through = through;	}	/**	 * 导师评语	 * 	 * @param remark	 */	@Column(length = 2000)	public String getRemark() {		return remark;	}	public void setRemark(String remark) {		this.remark = remark;	}	private SysOrgPerson newTeach;	@Transient	public SysOrgPerson getNewTeach() {		return newTeach;	}	public void setNewTeach(SysOrgPerson newTeach) {		this.newTeach = newTeach;	}	@Transient	public String getTotalValue() {		DecimalFormat df = new DecimalFormat("#.##");		double totalValue = 0;		for (GradeItem item : gradeItems) {			totalValue += item.getValue() == null ? 0 : item.getValue();		}		return df.format(totalValue);	}}