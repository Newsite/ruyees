package ruyees.otp.model.flow;import java.sql.Timestamp;import java.util.List;import javax.persistence.Entity;import javax.persistence.FetchType;import javax.persistence.JoinColumn;import javax.persistence.ManyToOne;import javax.persistence.OneToMany;import javax.persistence.OrderBy;import javax.persistence.PrimaryKeyJoinColumn;import javax.persistence.Table;import javax.persistence.Transient;import org.hibernate.annotations.Cache;import org.hibernate.annotations.CacheConcurrencyStrategy;import org.hibernate.annotations.Cascade;import org.springframework.util.CollectionUtils;import ruyees.otp.model.BamProcess;import ruyees.otp.model.core.CoreContentMovie;/** *  * 新教师查看文档、视频（教案） *  * @author xiaobin * @see ruyees.otp.model.base.ContentMovie <pre> * <h2>关于存储</h2> *  *      <pre> *                            1:存储新教师查看的文档和视频 * </pre> *  *      <h2>关于业务逻辑</h2> 1：由于业务部分并不会存储用户查看的历史记录，而是记录到日志操作表。( * @see ruyees.otp.model.flow.BamLog ) 2:在查看视频这一步骤会传递流程名称( * @see ruyees.otp.model.flow.BamProject name ), *      阶段索引，步骤索引如连接为：http://xxx/flow_demo/1/1代表第一关第一阶段。 先查询 *      3：所以针对用户查看的视频的处理思路如下： 2.1：新教师第一次查看视频会记录新教师已查看的状态(更新through字段) 2.2 *      如果查看完视频进入考试并考试失败，会全部把新教师之前的视频查看状态值为未查看。(更新through) </pre> * @author Zaric * @date 2013-6-1 上午1:17:51 */@Entity@Table(name = "IXDF_OTP_BAM_SEE_CW")@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)@PrimaryKeyJoinColumn(name = "bamSeeCwId")public class BamSeeCw extends CoreContentMovie implements BamProcess {	/**	 * 	 */	private static final long serialVersionUID = 1L;	/**	 * 文档查询时间	 */	private Timestamp fdTime;	/**	 * 是否通过(查看)	 */	private boolean through;	/**	 * 对应流程步骤记录	 */	private BamProjectPhase phase;	/**	 * 对应文档存储	 */	private List<BamAttMain> bamAttMains;	/**	 * 对应流程步骤	 * 	 * @return	 */	@ManyToOne(fetch = FetchType.LAZY)	@JoinColumn(name = "phaseId")	public BamProjectPhase getPhase() {		return phase;	}	/**	 * 流程步骤记录	 * 	 * @param phase	 */	public void setPhase(BamProjectPhase phase) {		this.phase = phase;	}	/**	 * 对应文档存储	 */	private BamAttMain bamAttMain;	@Transient	public BamAttMain getBamAttMain() {		if (!CollectionUtils.isEmpty(bamAttMains)) {			return bamAttMains.get(0);		}		return bamAttMain;	}	/**	 * 对应文档存储	 */	@OneToMany(mappedBy = "bamSeeCw", orphanRemoval = true)	@Cascade({ org.hibernate.annotations.CascadeType.ALL })	@OrderBy("fdIndex asc")	public List<BamAttMain> getBamAttMains() {		return bamAttMains;	}	public void setBamAttMains(List<BamAttMain> bamAttMains) {		this.bamAttMains = bamAttMains;	}	/**	 * 查看时间	 * 	 * @return	 */	public Timestamp getFdTime() {		return fdTime;	}	/**	 * 查看时间	 * 	 * @param fdTime	 */	public void setFdTime(Timestamp fdTime) {		this.fdTime = fdTime;	}	/**	 * 是否通过（查看）	 * 	 * @return	 */	public boolean getThrough() {		return through;	}	/**	 * 是否通过（查看）	 * 	 * @param through	 */	public void setThrough(boolean through) {		this.through = through;	}}