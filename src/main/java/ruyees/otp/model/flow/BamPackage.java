package ruyees.otp.model.flow;import java.text.DecimalFormat;import java.util.List;import javax.persistence.CascadeType;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.FetchType;import javax.persistence.JoinColumn;import javax.persistence.OneToMany;import javax.persistence.OneToOne;import javax.persistence.OrderBy;import javax.persistence.PrimaryKeyJoinColumn;import javax.persistence.Table;import javax.persistence.Transient;import org.hibernate.annotations.Cache;import org.hibernate.annotations.CacheConcurrencyStrategy;import ruyees.otp.model.BamProcess;import ruyees.otp.model.core.CoreOperPackage;/** * 新教师提交作业包 * <p/> * 此类有四个状态，属性为status 状态(0:未上传,1:已上传，2：已提交，3：驳回，4：审核通过) 如果已经审核通过的话，会更新到through字段. *  * @author Zaric * @date  2013-6-1 上午1:16:25 */@Entity@Table(name = "IXDF_OTP_BAM_SUBMIT_PACKAGE")@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)@PrimaryKeyJoinColumn(name = "BAMPACKAGEID")public class BamPackage extends CoreOperPackage implements BamProcess {	/**	 * 	 */	private static final long serialVersionUID = 1L;	public static final String MODEL_NAME = "ruyees.otp.model.flow.SubmitPackage";	/**	 * 流程步骤记录	 */	private BamProjectPhase phase;	/**	 * 是否通过	 */	private boolean through;	/**	 * 对应提交的作业	 */	private List<BamOperation> bamOperation;	/**	 * 评价	 */	private String fdComment;	@Column(length = 2000,name="FDCOMMENT")	public String getFdComment() {		return fdComment;	}	public void setFdComment(String fdComment) {		this.fdComment = fdComment;	}	/**	 * 流程步骤记录	 * 	 * @return	 */	@OneToOne(fetch = FetchType.LAZY)	@JoinColumn(name = "BAMPROJECTPHASEID")	public BamProjectPhase getPhase() {		return phase;	}	/**	 * 流程步骤记录	 * 	 * @param phase	 */	public void setPhase(BamProjectPhase phase) {		this.phase = phase;	}	/**	 * 是否通过	 * 	 * @return	 */	@Column(name="THROUGH")	public boolean getThrough() {		return through;	}	/**	 * 是否通过	 * 	 * @param through	 */	public void setThrough(boolean through) {		this.through = through;	}	@OneToMany(cascade = { CascadeType.PERSIST, CascadeType.REFRESH,			CascadeType.REMOVE, CascadeType.MERGE }, fetch = FetchType.LAZY, mappedBy = "bamPackage")	@OrderBy("fdOrder asc")	public List<BamOperation> getBamOperation() {		return bamOperation;	}	public void setBamOperation(List<BamOperation> bamOperation) {		this.bamOperation = bamOperation;	}	@Transient	public Boolean getIsSubmit(){		for(BamOperation oper :bamOperation){			for(BamIndex index:oper.getBamIndexs()){				if(index.getStatus()==2){					return true;				}			}		}		return false;	}		@Transient	public String getTotalValue(){		DecimalFormat df = new DecimalFormat("#.##");		double totalValue=0;		for(BamOperation oper :bamOperation){			for(BamIndex index:oper.getBamIndexs()){				totalValue +=index.getFdToValue()==null?0:index.getFdToValue();			}		}		return df.format(totalValue);	}}