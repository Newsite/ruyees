package ruyees.otp.model.flow;import java.io.IOException;import javax.persistence.Basic;import javax.persistence.Entity;import javax.persistence.FetchType;import javax.persistence.JoinColumn;import javax.persistence.Lob;import javax.persistence.ManyToOne;import javax.persistence.Table;import javax.persistence.Transient;import jodd.io.FileUtil;import org.apache.commons.lang3.StringUtils;import org.hibernate.annotations.Cache;import org.hibernate.annotations.CacheConcurrencyStrategy;import ruyees.otp.model.IdEntity;/** * 附件存储表 *  * @author Zaric * @date 2013-6-1 上午1:13:43 */@Entity@Table(name = "IXDF_OTP_BAM_ATT_MAIN")@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)public class BamAttMain extends IdEntity {	/**	 * 	 */	private static final long serialVersionUID = 1L;	/**	 * 文档视频	 */	private BamSeeCw bamSeeCw;		/**	 * 内容	 */	private byte[] fdData;	/**	 * 主表域模型	 */	private String modelName;	/**	 * 关键字	 */	private String fdkey;	/**	 * 文件名称	 */	private String fileName;	/**	 * 文件路径	 */	private String filePath;	/**	 * 文档接口Url 当集成文档视频接口，在前台调用此字段。	 */	private String fileUrl;	/**	 * 文档存储方式1:数据库 2:磁盘	 */	private int storeType;	/**	 * 文档类型 1:文档 2:视频 3:图片	 */	private int fileType;	/**	 * 文档图片序号	 */	private int fdIndex;	/**	 * 视频转化标志	 */	// private int flag;	/**	 * 存储内容	 * 	 * @return	 */	@Lob	@Basic(fetch = FetchType.LAZY)	public byte[] getFdData() {		return fdData;	}	/**	 * 存储内容	 * 	 * @param fdData	 */	public void setFdData(byte[] fdData) {		this.fdData = fdData;	}	/**	 * 主表域模型	 * 	 * @return	 */	public String getModelName() {		return modelName;	}	/**	 * 主表域模型	 * 	 * @param modelName	 */	public void setModelName(String modelName) {		this.modelName = modelName;	}	/**	 * 关键字	 * 	 * @return	 */	public String getFdkey() {		return fdkey;	}	/**	 * 关键字	 * 	 * @param key	 */	public void setFdkey(String fdkey) {		this.fdkey = fdkey;	}	/**	 * 文档名称	 * 	 * @return	 */	public String getFileName() {		return fileName;	}	/**	 * 文档名称	 * 	 * @param fileName	 */	public void setFileName(String fileName) {		this.fileName = fileName;	}	/**	 * 文档存储路径	 * 	 * @return	 */	public String getFilePath() {		return filePath;	}	/**	 * 文档存储路径 磁盘路径	 * 	 * @param filePath	 */	public void setFilePath(String filePath) {		this.filePath = filePath;	}	/**	 * 文档接口Url 当集成文档视频接口，在前台调用此字段。	 * 	 * @return	 */	public String getFileUrl() {		return fileUrl;	}	/**	 * 文档接口Url 当集成文档视频接口，在前台调用此字段。	 * 	 * @param fileUrl	 */	public void setFileUrl(String fileUrl) {		this.fileUrl = fileUrl;	}	/**	 * 文档存储方式 1:数据库 2：磁盘	 * 	 * @return	 */	public int getStoreType() {		return storeType;	}	/**	 * 文档存储方式 1:数据库 2:磁盘	 * 	 * @param storeType	 */	public void setStoreType(int storeType) {		this.storeType = storeType;	}	/**	 * 文件类型 1：文档 2：视频	 * 	 * @return	 */	public int getFileType() {		return fileType;	}	/**	 * 文件类型 1：文档 2：视频	 * 	 * @param fileType	 */	public void setFileType(int fileType) {		this.fileType = fileType;	}	/**	 * 文档图片序号	 * 	 * @return	 */	public int getFdIndex() {		return fdIndex;	}	public void setFdIndex(int fdIndex) {		this.fdIndex = fdIndex;	}	/**	 * 视频转化标志	 * 	 * @return	 */	/*	 * public int getFlag() { return flag; }	 * 	 * public void setFlag(int flag) { this.flag = flag; }	 */	@ManyToOne(fetch = FetchType.LAZY)	@JoinColumn(name = "fdBamSeeCwId")	public BamSeeCw getBamSeeCw() {		return bamSeeCw;	}	public void setBamSeeCw(BamSeeCw bamSeeCw) {		this.bamSeeCw = bamSeeCw;	}	/**	 * 移除磁盘附件	 */	@Transient	public void remove() {		if (StringUtils.isNotBlank(this.filePath)) {			try {				FileUtil.delete(this.filePath);			} catch (IOException e) {				// do nothing			}		}	}	@Transient	public String getTypeName() {		if (fileType == 1)			return "文档";		return "视频";	}	@Override	public int hashCode() {		final int prime = 11;		int result = 1;		result = prime * result + getFdId().hashCode();		return result;	}	@Override	public boolean equals(Object object) {		if (object == null) {			return false;		}		if (!getClass().equals(object.getClass())) {			return false;		}		final BamAttMain other = (BamAttMain) object;		if (!this.fdId.equals(other.fdId)) {			return false;		}		return true;	}}