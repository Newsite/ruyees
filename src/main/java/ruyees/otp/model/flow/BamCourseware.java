package ruyees.otp.model.flow;import java.util.List;import javax.persistence.CascadeType;import javax.persistence.Entity;import javax.persistence.FetchType;import javax.persistence.JoinColumn;import javax.persistence.ManyToOne;import javax.persistence.OneToMany;import javax.persistence.OrderBy;import javax.persistence.PrimaryKeyJoinColumn;import javax.persistence.Table;import javax.persistence.Transient;import org.hibernate.annotations.Cache;import org.hibernate.annotations.CacheConcurrencyStrategy;import ruyees.otp.model.BamProcess;import ruyees.otp.model.core.CoreCourseware;/** * 新教师提交课件 *  * @author Zaric * @date 2013-6-1 上午1:14:07 */@Entity@Table(name = "IXDF_OTP_BAM_COURSEWARE")@PrimaryKeyJoinColumn(name = "bamCoursewareId")@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)public class BamCourseware extends CoreCourseware implements BamProcess {	/**	 * 	 */	private static final long serialVersionUID = 1L;	/**	 * 对应流程步骤记录	 */	private BamProjectPhase phase;	/**	 * 是否通过	 */	private boolean through;	/**	 * 对应作业	 */	private List<BamCoursewareItem> items;	/**	 * 对应提交的作业	 * 	 * @return	 */	@OneToMany(cascade = { CascadeType.PERSIST, CascadeType.REFRESH,			CascadeType.REMOVE }, fetch = FetchType.LAZY, mappedBy = "bamCourseware")	@OrderBy("name asc")	public List<BamCoursewareItem> getItems() {		return items;	}	/**	 * 对应提交的作业	 * 	 * @param items	 */	public void setItems(List<BamCoursewareItem> items) {		this.items = items;	}	/**	 * 评价	 */	private String fdComment;	public String getFdComment() {		return fdComment;	}	public void setFdComment(String fdComment) {		this.fdComment = fdComment;	}	/**	 * 流程步骤记录	 * 	 * @return	 */	@ManyToOne(fetch = FetchType.LAZY)	@JoinColumn(name = "phaseId")	public BamProjectPhase getPhase() {		return phase;	}	/**	 * 流程步骤记录	 * 	 * @param phase	 */	public void setPhase(BamProjectPhase phase) {		this.phase = phase;	}	/**	 * 是否通过	 * 	 * @return	 */	public boolean getThrough() {		return through;	}	/**	 * 是否通过	 * 	 * @param through	 */	public void setThrough(boolean through) {		this.through = through;	}	@Transient	public Boolean getIsSubmit() {		for (BamCoursewareItem item : items) {			if (item.getStatus() == 2) {				return true;			}		}		return false;	}}