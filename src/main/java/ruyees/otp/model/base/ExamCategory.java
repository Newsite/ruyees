package ruyees.otp.model.base;import java.util.List;import java.util.Set;import java.util.TreeSet;import javax.persistence.CascadeType;import javax.persistence.Entity;import javax.persistence.FetchType;import javax.persistence.ManyToMany;import javax.persistence.OneToMany;import javax.persistence.PrimaryKeyJoinColumn;import javax.persistence.Table;import org.hibernate.annotations.Cache;import org.hibernate.annotations.CacheConcurrencyStrategy;import ruyees.otp.model.core.CoreExamCategory;import ruyees.otp.model.template.TemplateContent;/** * 考试类别 *  * @author Zaric * @date 2013-6-1 上午1:09:46 */@Entity@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)@Table(name = "IXDF_OTP_EXAM_CATEGORY")@PrimaryKeyJoinColumn(name = "examCategoryId")public class ExamCategory extends CoreExamCategory implements		Comparable<ExamCategory> {	/**	 * 	 */	private static final long serialVersionUID = 1L;	/**	 * 对应考题	 */	private List<Exam> exams;	// 对应步骤	private Set<TemplateContent> templateContents;	public ExamCategory() {	}	public ExamCategory(String fdId) {		this.fdId = fdId;	}	/**	 * 对应步骤	 * 	 * @return	 */	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "examCategories")	public Set<TemplateContent> getTemplateContents() {		if (templateContents == null) {			return new TreeSet<TemplateContent>();		}		return templateContents;	}	/**	 * 对应步骤	 * 	 * @param templateContents	 */	public void setTemplateContents(Set<TemplateContent> templateContents) {		this.templateContents = templateContents;	}	/**	 * 	 * 对应考题	 */	@OneToMany(cascade = { CascadeType.REFRESH, CascadeType.REMOVE }, fetch = FetchType.LAZY, mappedBy = "examCategory")	public List<Exam> getExams() {		return exams;	}	public void setExams(List<Exam> exams) {		this.exams = exams;	}	@Override	public int hashCode() {		final int prime = 11;		int result = 1;		result = prime * result + getFdId().hashCode();		return result;	}	public int compareTo(ExamCategory o) {		return this.getFdId().compareTo(o.getFdId());	}	@Override	public boolean equals(Object object) {		if (object == null) {			return false;		}		if (!getClass().equals(object.getClass())) {			return false;		}		final ExamCategory other = (ExamCategory) object;		if (!this.fdId.equals(other.fdId)) {			return false;		}		return true;	}}