package cn.xdf.me.otp.model.template;import java.math.BigDecimal;import java.util.Date;import java.util.List;import javax.persistence.CascadeType;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.FetchType;import javax.persistence.JoinColumn;import javax.persistence.ManyToOne;import javax.persistence.OneToMany;import javax.persistence.OrderBy;import javax.persistence.Table;import org.hibernate.annotations.Cache;import org.hibernate.annotations.CacheConcurrencyStrategy;import cn.xdf.me.otp.model.IdEntity;import cn.xdf.me.otp.model.base.Diction;import cn.xdf.me.otp.model.flow.BamProject;/** *  * 保存流程后，相应的增加对应发起的的流程。 *  * <pre> * 如选择了3个发起人，则相应的在流程记录表( *  @see cn.xdf.me.otp.model.flow.BamProject 里增加3条记录， * 并把状态(字段对应status)值为1. * </pre> *  * @author Zaric * @date 2013-6-1 上午1:23:27 */@Entity@Table(name = "IXDF_OTP_PROC_TEMPLATE")@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)public class ProTemplate extends IdEntity {	/**	 * 	 */	private static final long serialVersionUID = 1L;	/**	 * 模板名称	 */	private String fdName;	/**	 * 所属项目	 */	private Diction program;	/**	 * 所属课程	 */	private Diction course;	/**	 * 所属分项	 */	private Diction item;	/**	 * 所属阶段	 */	private Diction stage;	/**	 * 状态	 */	private boolean fdStatus;	/**	 * 描述	 */	private String description;	/**	 * 创建者ID	 */	private String fdCreateorId;	/**	 * 创建时间	 */	private Date fdDateCreated;	/**	 * 流程图标	 */	private String fdImg;	/**	 * 作业分值权重	 */	private BigDecimal fdOperationWeight;	/**	 * 批课分值权重	 */	private BigDecimal fdAppofClass;	/**	 * 对应流程	 */	private List<BamProject> bamProjects;	/**	 * 对应阶段	 */	private List<TemplateItem> templateItem;	/**	 * 模板名称	 * 	 * @return	 */	public String getFdName() {		return fdName;	}	public void setFdName(String fdName) {		this.fdName = fdName;	}	/**	 * 所属项目	 * 	 * @return	 */	@ManyToOne(fetch = FetchType.EAGER)	@JoinColumn(name = "program_id")	public Diction getProgram() {		return program;	}	public void setProgram(Diction program) {		this.program = program;	}	/**	 * 所属课程	 * 	 * @return	 */	@ManyToOne(fetch = FetchType.EAGER)	@JoinColumn(name = "course_id")	public Diction getCourse() {		return course;	}	public void setCourse(Diction course) {		this.course = course;	}	/**	 * 所属分项	 * 	 * @return	 */	@ManyToOne(fetch = FetchType.EAGER)	@JoinColumn(name = "item_id")	public Diction getItem() {		return item;	}	public void setItem(Diction item) {		this.item = item;	}	/**	 * 所属阶段	 * 	 * @return	 */	@ManyToOne(fetch = FetchType.EAGER)	@JoinColumn(name = "stage_id")	public Diction getStage() {		return stage;	}	public void setStage(Diction stage) {		this.stage = stage;	}	/**	 * 状态	 * 	 * @return	 */	public boolean getFdStatus() {		return fdStatus;	}	public void setFdStatus(boolean fdStatus) {		this.fdStatus = fdStatus;	}	/**	 * 描述	 * 	 * @return	 */	@Column(length = 2000)	public String getDescription() {		return description;	}	public void setDescription(String description) {		this.description = description;	}	/**	 * 创建者ID	 * 	 * @return	 */	@Column(length = 50)	public String getFdCreateorId() {		return fdCreateorId;	}	public void setFdCreateorId(String fdCreateorId) {		this.fdCreateorId = fdCreateorId;	}	/**	 * 创建时间	 * 	 * @return	 */	public Date getFdDateCreated() {		return fdDateCreated;	}	public void setFdDateCreated(Date fdDateCreated) {		this.fdDateCreated = fdDateCreated;	}	/**	 * 流程图标	 * 	 * @return	 */	public String getFdImg() {		return fdImg;	}	public void setFdImg(String fdImg) {		this.fdImg = fdImg;	}	/**	 * 作业分值权重	 * 	 * @return	 */	public BigDecimal getFdOperationWeight() {		return fdOperationWeight;	}	public void setFdOperationWeight(BigDecimal fdOperationWeight) {		this.fdOperationWeight = fdOperationWeight;	}	/**	 * 批课分值权重	 * 	 * @return	 */	public BigDecimal getFdAppofClass() {		return fdAppofClass;	}	public void setFdAppofClass(BigDecimal fdAppofClass) {		this.fdAppofClass = fdAppofClass;	}	/**	 * 流程参与人	 * 	 * @return	 */	@OneToMany(mappedBy = "template", cascade = { CascadeType.PERSIST,			CascadeType.REFRESH, CascadeType.MERGE })	public List<BamProject> getBamProjects() {		return bamProjects;	}	public void setBamProjects(List<BamProject> bamProjects) {		this.bamProjects = bamProjects;	}	@OneToMany(cascade = { CascadeType.ALL }, fetch = FetchType.EAGER, mappedBy = "template")	@OrderBy("fdIndex asc")	public List<TemplateItem> getTemplateItem() {		return templateItem;	}	public void setTemplateItem(List<TemplateItem> templateItem) {		this.templateItem = templateItem;	}	@Override	public int hashCode() {		final int prime = 11;		int result = 1;		result = prime * result + getFdId().hashCode();		return result;	}	@Override	public boolean equals(Object object) {		if (object == null) {			return false;		}		if (!getClass().equals(object.getClass())) {			return false;		}		ProTemplate other = (ProTemplate) object;		if (!this.fdId.equals(other.fdId)) {			return false;		}		return true;	}}