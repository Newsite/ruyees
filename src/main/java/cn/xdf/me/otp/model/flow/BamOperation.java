package cn.xdf.me.otp.model.flow;import java.util.List;import javax.persistence.Entity;import javax.persistence.FetchType;import javax.persistence.JoinColumn;import javax.persistence.ManyToOne;import javax.persistence.OneToMany;import javax.persistence.OrderBy;import javax.persistence.PrimaryKeyJoinColumn;import javax.persistence.Table;import org.hibernate.annotations.Cache;import org.hibernate.annotations.CacheConcurrencyStrategy;import org.hibernate.annotations.Cascade;import cn.xdf.me.otp.model.core.CoreOperation;/** * 对应作业 *  * @author Zaric * @date 2013-6-1 上午1:16:08 */@Entity@Table(name = "IXDF_OTP_BAM_OPERTION")@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)@PrimaryKeyJoinColumn(name = "bamOperationId")public class BamOperation extends CoreOperation {	/**	 * 	 */	private static final long serialVersionUID = 1L;	/**	 * 对应作业包	 */	private BamPackage bamPackage;	/**	 * 对应指标	 */	private List<BamIndex> bamIndexs;	public BamOperation() {	}	public BamOperation(String fdId) {		this.fdId = fdId;	}	/**	 * 对应作业包	 * 	 * @return	 */	@ManyToOne(fetch = FetchType.LAZY)	@JoinColumn(name = "bamPackageId")	public BamPackage getBamPackage() {		return bamPackage;	}	public void setBamPackage(BamPackage bamPackage) {		this.bamPackage = bamPackage;	}	/**	 * 对应指标	 * 	 */	@OneToMany(mappedBy = "bamOperation", orphanRemoval = true)	@Cascade({ org.hibernate.annotations.CascadeType.ALL })	@OrderBy("fdOrder asc")	public List<BamIndex> getBamIndexs() {		return bamIndexs;	}	public void setBamIndexs(List<BamIndex> bamIndexs) {		this.bamIndexs = bamIndexs;	}	/**	 * 是否通过	 */	private boolean through;	/**	 * 是否通过	 * 	 * @return	 */	public boolean getThrough() {		return through;	}	/**	 * 是否通过	 * 	 * @param through	 */	public void setThrough(boolean through) {		this.through = through;	}	@Override	public int hashCode() {		final int prime = 11;		int result = 1;		result = prime * result + getFdId().hashCode();		return result;	}	@Override	public boolean equals(Object object) {		if (object == null) {			return false;		}		if (!getClass().equals(object.getClass())) {			return false;		}		BamOperation other = (BamOperation) object;		if (!this.getFdId().equals(other.getFdId())) {			return false;		}		return true;	}}