package cn.xdf.me.otp.model.template;import java.util.List;import java.util.Set;import javax.persistence.Basic;import javax.persistence.CascadeType;import javax.persistence.Entity;import javax.persistence.FetchType;import javax.persistence.JoinColumn;import javax.persistence.JoinTable;import javax.persistence.Lob;import javax.persistence.ManyToMany;import javax.persistence.ManyToOne;import javax.persistence.OneToMany;import javax.persistence.OneToOne;import javax.persistence.OrderBy;import javax.persistence.Table;import javax.persistence.Transient;import org.hibernate.annotations.Cache;import org.hibernate.annotations.CacheConcurrencyStrategy;import org.hibernate.annotations.Cascade;import cn.xdf.me.otp.model.IdEntity;import cn.xdf.me.otp.model.base.ContentMovie;import cn.xdf.me.otp.model.base.Courseware;import cn.xdf.me.otp.model.base.EvalItem;import cn.xdf.me.otp.model.base.ExamCategory;import cn.xdf.me.otp.model.base.NewItemConf;import cn.xdf.me.otp.model.base.OperPackage;/** *  * 流程步骤 由于设置维护是针对主表的， 所以如果要在TemplateItem里直接维护TemplateContent， * 需遍历TemplateItem里的TemplateContent，然后setItem(item). *  * @author Zaric * @date 2013-6-1 上午1:23:43 */@Entity@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)@Table(name = "IXDF_OTP_TEMPLATE_CONTENT")public class TemplateContent extends IdEntity {	/**	 * 	 */	private static final long serialVersionUID = 1L;	/**	 * 对应模板阶段	 */	private TemplateItem item;	/**	 * 对应内容类型	 */	private int fdItemType;	/**	 * 对应步骤序号	 */	private int fdIndex;	/**	 * 说明	 */	private String fdRemarke;	// ------------------------------------------------------实例项///////////////////////////////	/**	 * 批课老师评分分项配置	 */	private List<EvalItem> evalItems;	/**	 * 新教师评分分项配置	 */	private List<NewItemConf> newItemConfs;	/**	 * 对应文档视频	 */	private Set<ContentMovie> contentMovies;	/**	 * 对应作业包	 */	private OperPackage operPackage;	/**	 * 对应试卷	 */	private Set<ExamCategory> examCategories;	/**	 * 新教师提交课件	 */	private Courseware courseware;	// -------------------------------------------------------------------------------	/**	 * Spring的BeanWrapper的Bug，	 * <p>	 * 针对Set,如果最大下标值大于Set的size，则会抛出org.springframework.beans.	 * InvalidPropertyException异常 对应文档视频	 * </p>	 */	private List<ContentMovie> viewContentMovies;	/**	 * 对应试卷	 */	private List<ExamCategory> viewExamCategories;	// ------------------------------------------------------end实例项///////////////////////////////	/**	 * 对应模板阶段	 * 	 * @return	 */	@ManyToOne(fetch = FetchType.LAZY)	@JoinColumn(name = "item_id")	public TemplateItem getItem() {		return item;	}	/**	 * 对应模板阶段	 * 	 * @param item	 */	public void setItem(TemplateItem item) {		this.item = item;	}	/**	 * 对应内容类型	 * <p/>	 * 	 * <pre>	 * 内容类型1:视频查看 2:考试 3:提交作业包 4：资料查看 5：提交课件 6：批课打分	 * </pre>	 * 	 * @return	 */	public int getFdItemType() {		return fdItemType;	}	/**	 * 对应内容类型	 * <p/>	 * 	 * <pre>	 * 内容类型1:视频查看 2:考试 3:提交作业包 4:资料查看 5:提交课件 6:批课打分	 * </pre>	 * 	 * @param fdItemType	 */	public void setFdItemType(int fdItemType) {		this.fdItemType = fdItemType;	}	/**	 * 对应步骤序号	 * 	 * @return	 */	public int getFdIndex() {		return fdIndex;	}	public void setFdIndex(int fdIndex) {		this.fdIndex = fdIndex;	}	/**	 * 说明	 * 	 * @return	 */	@Lob	@Basic(fetch = FetchType.LAZY)	public String getFdRemarke() {		return fdRemarke;	}	/**	 * 说明	 * 	 * @param fdRemarke	 */	public void setFdRemarke(String fdRemarke) {		this.fdRemarke = fdRemarke;	}	/**	 * 对应文档视频	 * 	 * @return	 */	@ManyToMany(cascade = { CascadeType.MERGE, CascadeType.PERSIST,			CascadeType.REFRESH }, fetch = FetchType.LAZY)	@JoinTable(name = "IXDF_OTP_CONTENT_CW", joinColumns = { @JoinColumn(name = "FD_CONTENT_ID") }, inverseJoinColumns = { @JoinColumn(name = "FD_CM_ID") })	@OrderBy("fdName asc")	public Set<ContentMovie> getContentMovies() {		return contentMovies;	}	public void setContentMovies(Set<ContentMovie> contentMovies) {		this.contentMovies = contentMovies;	}	/**	 * 对应指导教师分项配置	 * 	 * @return	 */	@OneToMany(fetch = FetchType.LAZY, mappedBy = "templateContent", orphanRemoval = true)	@Cascade({ org.hibernate.annotations.CascadeType.ALL })	public List<EvalItem> getEvalItems() {		return evalItems;	}	public void setEvalItems(List<EvalItem> evalItems) {		this.evalItems = evalItems;	}	/**	 * 对应作业包	 * 	 * @return	 */	@OneToOne(fetch = FetchType.LAZY)	@Cascade({ org.hibernate.annotations.CascadeType.MERGE,			org.hibernate.annotations.CascadeType.REFRESH })	@JoinColumn(name = "packageId")	public OperPackage getOperPackage() {		return operPackage;	}	/**	 * 对应作业包	 * 	 * @param operPackage	 */	public void setOperPackage(OperPackage operPackage) {		this.operPackage = operPackage;	}	/**	 * 对应试卷	 * 	 * @return	 */	@ManyToMany(cascade = { CascadeType.MERGE, CascadeType.PERSIST,			CascadeType.REFRESH }, fetch = FetchType.LAZY)	@JoinTable(name = "IXDF_OTP_CONTENT_EXAMCATE", joinColumns = { @JoinColumn(name = "FD_CONTENT_ID") }, inverseJoinColumns = { @JoinColumn(name = "FD_EXAMCATE_ID") })	public Set<ExamCategory> getExamCategories() {		return examCategories;	}	/**	 * 对应试卷	 * 	 * @param examCategories	 */	public void setExamCategories(Set<ExamCategory> examCategories) {		this.examCategories = examCategories;	}	/**	 * 新教师评分分项	 * 	 * @return	 */	@OneToMany(fetch = FetchType.LAZY, mappedBy = "templateContent", orphanRemoval = true)	@Cascade({ org.hibernate.annotations.CascadeType.ALL })	public List<NewItemConf> getNewItemConfs() {		return newItemConfs;	}	public void setNewItemConfs(List<NewItemConf> newItemConfs) {		this.newItemConfs = newItemConfs;	}	/**	 * 页面 对应视频和文档	 * 	 * @return	 */	@Transient	public List<ContentMovie> getViewContentMovies() {		return viewContentMovies;	}	/**	 * 页面 对应视频和文档	 * 	 * @param viewContentMovies	 */	public void setViewContentMovies(List<ContentMovie> viewContentMovies) {		this.viewContentMovies = viewContentMovies;	}	/**	 * 页面 对应试卷	 * 	 * @return	 */	@Transient	public List<ExamCategory> getViewExamCategories() {		return viewExamCategories;	}	/**	 * 页面 对应试卷	 * 	 * @param viewExamCategories	 */	public void setViewExamCategories(List<ExamCategory> viewExamCategories) {		this.viewExamCategories = viewExamCategories;	}	/**	 * 新教师提交课件的资料及说明	 * 	 * @return	 */	@OneToOne(fetch = FetchType.LAZY, orphanRemoval = true)	@Cascade({ org.hibernate.annotations.CascadeType.ALL })	@JoinColumn(name = "couId")	public Courseware getCourseware() {		return courseware;	}	/**	 * 新教师提交课件的资料及说明	 * 	 * @param courseware	 */	public void setCourseware(Courseware courseware) {		this.courseware = courseware;	}	@Override	public int hashCode() {		final int prime = 11;		int result = 1;		result = prime * result + getFdId().hashCode();		return result;	}	@Override	public boolean equals(Object object) {		if (object == null) {			return false;		}		if (!getClass().equals(object.getClass())) {			return false;		}		TemplateContent other = (TemplateContent) object;		if (!this.fdId.equals(other.fdId)) {			return false;		}		return true;	}}