package cn.xdf.me.otp.action.base;import java.util.List;import javax.servlet.http.HttpServletRequest;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import cn.xdf.me.otp.model.flow.BamCourseware;import cn.xdf.me.otp.model.flow.BamOperation;import cn.xdf.me.otp.model.flow.BamProjectPhase;import cn.xdf.me.otp.service.flow.BamCoursewareService;import cn.xdf.me.otp.service.flow.BamOperationService;import cn.xdf.me.otp.service.flow.BamProjectService;@Controller@RequestMapping(value = "/campus/flow/edit")public class FlowEditController {	@Autowired	private BamProjectService bamProjectService;	@Autowired	private BamOperationService bamOperationService;	@Autowired	private BamCoursewareService bamCoursewareService;	/**	 * 进入流程阶段步骤下的作业列表	 * 	 * @param	 * @return	 */	@RequestMapping(value = "/bamOperation/list/{flowId}/{stage}/{step}", method = RequestMethod.GET)	public String bamOperationList(Model model,			@PathVariable("flowId") String flowId,			@PathVariable("stage") int stage, @PathVariable("step") int step) {		BamProjectPhase bamProjectPhase = bamProjectService				.findBamProjectPhase(flowId, stage, step);		List<BamOperation> list = bamProjectPhase.getBamPackage()				.getBamOperation();		model.addAttribute("bean", list);		// if(list == null || list.size() < 1){		// return "/base/flow/list";		// }		return String.format("/base/flow/edit/operation/list_%s_%s", stage,				step);	}	/**	 * 进入流程阶段步骤下的编辑作业页面	 * 	 * @param	 * @return	 */	@RequestMapping(value = "/bamOperation/edit/{fdId}/{stage}/{step}", method = RequestMethod.GET)	public String editBamOperation(Model model,			@PathVariable("fdId") String fdId,			@PathVariable("stage") int stage, @PathVariable("step") int step) {		BamOperation operation = bamOperationService.load(fdId);		model.addAttribute("bean", operation);		return String.format("/base/flow/edit/operation/edit_%s_%s", stage,				step);	}	/**	 * 保存流程阶段步骤下的作业	 * 	 * @param	 * @return	 */	@RequestMapping(value = "/bamOperation/save", method = RequestMethod.POST)	public String saveBamOperation(BamOperation operation, Model model,			RedirectAttributes redirectAttributes, HttpServletRequest request) {		bamOperationService.saveFlowOperation(operation);		String flowId = request.getParameter("flowId");		String stage = request.getParameter("stage");		String step = request.getParameter("step");		return String.format(				"redirect:/campus/flow/edit/bamOperation/list/%s/%s/%s",				flowId, stage, step);	}	/**	 * 进入流程阶段步骤下的课件列表	 * 	 * @param	 * @return	 */	@RequestMapping(value = "/bamCourseware/list/{flowId}/{stage}/{step}", method = RequestMethod.GET)	public String bamCoursewareList(Model model,			@PathVariable("flowId") String flowId,			@PathVariable("stage") int stage, @PathVariable("step") int step) {		BamProjectPhase bamProjectPhase = bamProjectService				.findBamProjectPhase(flowId, stage, step);		List<BamCourseware> list = bamProjectPhase.getCoursewares();		model.addAttribute("bean", list);		return String.format("/base/flow/edit/courseware/list_%s_%s", stage,				step);	}	/**	 * 进入流程阶段步骤下的课件编辑页面	 * 	 * @param	 * @return	 */	@RequestMapping(value = "/bamCourseware/edit/{fdId}/{stage}/{step}", method = RequestMethod.GET)	public String editBamCourseware(Model model,			@PathVariable("fdId") String fdId,			@PathVariable("stage") int stage, @PathVariable("step") int step) {		BamProjectPhase bamProjectPhase = bamProjectService				.findBamProjectPhase(fdId, stage, step == 1 ? 2 : step);		List<BamCourseware> list = bamProjectPhase.getCoursewares();		if (list != null & list.size() > 0) {			BamCourseware courseware = list.get(0);			model.addAttribute("bean", courseware);		}		return String.format("/base/flow/edit/courseware/edit_%s_%s", stage,				step);	}	/**	 * 保存流程阶段步骤下的课件	 * 	 * @param	 * @return	 */	@RequestMapping(value = "/bamCourseware/save", method = RequestMethod.POST)	public String saveBamCourseware(BamCourseware courseware, Model model,			RedirectAttributes redirectAttributes, HttpServletRequest request) {		bamCoursewareService.saveFlowCourseware(courseware);		return "redirect:/campus/flow/list";	}}