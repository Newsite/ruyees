package cn.xdf.me.otp.service.template;import java.io.Serializable;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Set;import java.util.TreeSet;import org.apache.commons.lang3.StringUtils;import org.apache.shiro.SecurityUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.CollectionUtils;import cn.xdf.me.otp.common.hibernate4.Value;import cn.xdf.me.otp.model.base.ContentMovie;import cn.xdf.me.otp.model.base.Courseware;import cn.xdf.me.otp.model.base.CoursewareItem;import cn.xdf.me.otp.model.base.EvalItem;import cn.xdf.me.otp.model.base.ExamCategory;import cn.xdf.me.otp.model.base.NewItemConf;import cn.xdf.me.otp.model.base.OperPackage;import cn.xdf.me.otp.model.flow.BamProject;import cn.xdf.me.otp.model.sys.SysOrgPerson;import cn.xdf.me.otp.model.template.ProTemplate;import cn.xdf.me.otp.model.template.TemplateContent;import cn.xdf.me.otp.model.template.TemplateItem;import cn.xdf.me.otp.service.AccountService;import cn.xdf.me.otp.service.BaseService;import cn.xdf.me.otp.service.ShiroDbRealm.ShiroUser;/** *  * 备课流程模板 *  * @author Zaric * @date 2013-6-1 上午1:39:24 */@Service@Transactional(readOnly = true)public class ProTemplateService extends BaseService {	@Autowired	private AccountService accountService;	@SuppressWarnings("unchecked")	@Override	public Class<ProTemplate> getEntityClass() {		return ProTemplate.class;	}	/**	 * 保存流程模板数据 1:保存模板数据的时候相应的把人员对应的流程添加到数据库里	 * 	 * @param template	 * @return	 */	@Transactional(readOnly = false)	public ProTemplate saveAssignment(ProTemplate template) {		List<BamProject> bamProjects = template.getBamProjects();		if (bamProjects != null) {			for (BamProject bamProject : bamProjects) {				if (bamProject.getUser() == null)					continue;				SysOrgPerson person = accountService.load(bamProject.getUser()						.getFdId());				// 添加对应流程记录				bamProject.setUser(person);				if (bamProject.getStatus() <= BamProject.NO_OPEN) {					bamProject.setStatus(BamProject.NO_OPEN);				}				BamProject targetProject = get(BamProject.class,						bamProject.getFdId());				if (targetProject != null) {					bamProject.setCreateTime(targetProject.getCreateTime());					bamProject.setName(targetProject.getName());					bamProject.setBamProjectMembers(targetProject							.getBamProjectMembers());					bamProject.setSchId(targetProject.getSchId());					bamProject.setRemark(targetProject.getRemark());				}				bamProject.setTemplate(template);				bamProject.setDeptId(person.getDepatId());				super.save(bamProject);			}		} else {			template.setBamProjects(new ArrayList<BamProject>());		}		template.setFdStatus(true);		return saveTemplate(template);	}	/**	 * 批量删除流程模板数据	 */	@Transactional(readOnly = false)	public void delete(Serializable[] ids) {		for (Serializable id : ids) {			delete(id);		}	}	/**	 * 移除流程模板数据	 * 	 * @param id	 */	@Transactional(readOnly = false)	public void delete(Serializable id) {		ProTemplate template = load(id);		List<TemplateItem> items = template.getTemplateItem();		for (TemplateItem item : items) {			List<TemplateContent> contents = item.getTemplateContents();			for (TemplateContent content : contents) {				// 移除文档视频				Set<ContentMovie> movies = content.getContentMovies();				content.getContentMovies().removeAll(movies);				// 移除试卷				Set<ExamCategory> categories = content.getExamCategories();				content.getExamCategories().removeAll(categories);				// 移除作业包				/*				 * Set<OperPackage> packages = content.getOperPackages();				 * content.getOperPackages().removeAll(packages);				 * update(content);				 */			}		}		super.deleteEntity(template);	}	@Transactional(readOnly = false)	public ProTemplate saveTemplateAndStatus(ProTemplate template) {		ProTemplate targetTemplate = get(ProTemplate.class, template.getFdId());		if (targetTemplate != null) {			template.setFdStatus(targetTemplate.getFdStatus());		}		return saveTemplate(template);	}	/**	 * 保存流程模板数据	 * 	 * @param template	 * @return	 */	@Transactional(readOnly = false)	private ProTemplate saveTemplate(ProTemplate template) {		ShiroUser user = (ShiroUser) SecurityUtils.getSubject().getPrincipal();		String uId = user.id;		template.setFdCreateorId(uId);		template.setFdDateCreated(new Date());		if (template.getBamProjects() == null) {			template.setBamProjects(new ArrayList<BamProject>());		}		// 设置阶段		if (template.getTemplateItem() != null) {			for (TemplateItem item : template.getTemplateItem()) {				// 步骤				List<TemplateContent> contents = item.getTemplateContents();				for (TemplateContent content : contents) {					content.setItem(item);					/**					 * 设置批课老师评分分项					 */					if (content.getEvalItems() != null) {						for (EvalItem evalItem : content.getEvalItems()) {							if (StringUtils.isBlank(evalItem.getFdName())) {								continue;							}							evalItem.setTemplateContent(content);						}					} else {						content.setEvalItems(new ArrayList<EvalItem>());					}					/**					 * 设置新教师评分分项					 */					if (content.getNewItemConfs() != null) {						for (NewItemConf newItemConf : content								.getNewItemConfs()) {							if (StringUtils.isBlank(newItemConf.getFdName())) {								continue;							}							newItemConf.setTemplateContent(content);						}					} else {						content.setNewItemConfs(new ArrayList<NewItemConf>());					}					// 步骤视频					List<ContentMovie> contentMovies = content							.getViewContentMovies();					Set<ContentMovie> contentMovieset = new TreeSet<ContentMovie>();					if (contentMovies != null && contentMovies.size() > 0) {						for (ContentMovie contentMovie : contentMovieset) {							getBaseDao()									.executeUpdate(											"delete from AttMain where contentMovie.fdId=?",											contentMovie.getFdId());						}						for (ContentMovie contentMovie : contentMovies) {							contentMovie = getBaseDao().get(ContentMovie.class,									contentMovie.getFdId());							if (contentMovie != null)								contentMovieset.add(contentMovie);						}					}					content.setContentMovies(contentMovieset);					// 考试					List<ExamCategory> examCategories = content							.getViewExamCategories();					Set<ExamCategory> examSet = new TreeSet<ExamCategory>();					if (examCategories != null) {						for (ExamCategory examCategory : examCategories) {							examCategory = getBaseDao().load(									ExamCategory.class, examCategory.getFdId());							if (examCategory instanceof ExamCategory) {								examSet.add(examCategory);							}						}					}					content.setExamCategories(examSet);					// 作业包					OperPackage operPackage = content.getOperPackage();					if (operPackage != null) {						operPackage = load(OperPackage.class,								operPackage.getFdId());						content.setOperPackage(operPackage);						operPackage.setTemplateContent(content);					} else {						content.setOperPackage(null);					}					// 课件					Courseware courseware = content.getCourseware();					if (courseware != null) {						List<CoursewareItem> items = courseware.getItems();						if (items != null) {							super.getBaseDao()									.executeUpdate(											"delete from CoursewareItem where courseware.fdId=?",											courseware.getFdId());							for (CoursewareItem citem : items) {								if (StringUtils.isBlank(citem.getName())) {									continue;								}								citem.setCourseware(courseware);							}							courseware.setItems(items);						} else {							courseware									.setItems(new ArrayList<CoursewareItem>());						}						super.save(courseware);						content.setCourseware(courseware);					} else {						content.setCourseware(null);					}				}				item.setTemplate(template);			}		}		return super.save(template);	}	public boolean hasTemplateByName(String name) {		List<ProTemplate> lists = findByCriteria(ProTemplate.class,				Value.eq("fdName", name));		return !(CollectionUtils.isEmpty(lists));	}}